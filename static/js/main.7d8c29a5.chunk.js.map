{"version":3,"sources":["components/BusinessFolder/Business.js","components/app/logo.svg","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Business","Businessg","class","src","alt","className","React","Component","BusinessList","sortByOptions","SearchBar","Object","keys","map","sortByOption","sortByOptionValue","this","renderSortByOptions","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAGMA,GCHS,I,kBDWH,KA4BGC,E,uKAtBR,OACC,sBAAKC,MAAM,WAAX,UACA,qBAAKA,MAAM,kBAAX,SACE,qBAAKC,IAAI,gFAAgFC,IAAI,OAE/F,qDACA,sBAAKC,UAAU,uBAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oDACA,2CACA,4CAEF,sBAAKA,UAAU,mBAAf,UACE,yCACL,oBAAIA,UAAU,SAAd,SAAwBL,IACnB,wD,GAjBYM,IAAMC,WEIfC,E,uKAbP,OACI,sBAAKH,UAAU,eAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GATWC,IAAMC,WCD3BE,G,MAAgB,CAClB,aAAc,aACd,gBAAiB,SACjB,gBAAiB,iBA6BNC,E,oLAxBL,OAAOC,OAAOC,KAAKH,GAAeI,KAAI,SAACC,GACrC,IAAIC,EAAoBN,EAAcK,GACxC,OAAQ,mCAA8BA,EAA9B,MAASC,Q,+BAInB,OACI,sBAAKV,UAAU,YAAf,UACA,qBAAKA,UAAU,yBAAf,SACE,6BACGW,KAAKC,0BAGV,sBAAKZ,UAAU,mBAAf,UACE,uBAAOa,YAAY,sBACnB,uBAAOA,YAAY,cAErB,qBAAKb,UAAU,mBAAf,SACE,kD,GApBUC,IAAMC,WCUfY,E,uKAVX,OACE,sBAAKd,UAAU,MAAf,UACE,4CACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GANUC,IAAMC,WCKJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7d8c29a5.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Business.css';\nconst Business = {\n    imageSrc: 'https://content.codecademy.com/programs/react/ravenous/pizza.jpg',\n    name: 'MarginOtto Pizzeria',\n    address: '1010 Paddington Way',\n    city: 'Flavortown',\n    state: 'NY',\n    zipCode: '10101',\n    category: 'Italian',\n    rating: 4.5,\n    reviewCount: 90 \n}\n\nclass Businessg extends React.Component {\n    render() {\n       return (\n        <div class=\"Business\">\n        <div class=\"image-container\">\n          <img src='https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg' alt=''/>\n        </div>\n        <h2>MarginOtto Pizzeria</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>1010 Paddington Way</p>\n            <p>Bordertown</p>\n            <p>NY 10101</p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>ITALIAN</h3>\n       <h3 className=\"rating\">{Business.rating}</h3>\n            <p>90 reviews</p>\n          </div>\n        </div>\n      </div>\n       );\n    }\n}\nexport default Businessg;","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport './BusinessList.css';\nimport Businessg from '../BusinessFolder/Business.js';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                <Businessg />\n                <Businessg />\n                <Businessg />\n                <Businessg />\n                <Businessg />\n                <Businessg />\n            </div>\n        )\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nconst sortByOptions = {\n    'Best Match': 'best_match',\n    'Highest Rated': 'rating',\n    'Most Reviewed': 'review_count'\n}\n\nclass SearchBar extends React.Component {\n    renderSortByOptions() {\n          return Object.keys(sortByOptions).map((sortByOption) => { \n            let sortByOptionValue = sortByOptions[sortByOption];\n          return  <li key={sortByOptionValue}> {sortByOption} </li>\n        });\n    }\n    render() {\n        return(\n            <div className=\"SearchBar\">\n            <div className=\"SearchBar-sort-options\">\n              <ul>\n                {this.renderSortByOptions()}\n              </ul>\n            </div>\n            <div className=\"SearchBar-fields\">\n              <input placeholder=\"Search Businesses\" />\n              <input placeholder=\"Where?\" />\n            </div>\n            <div className=\"SearchBar-submit\">\n              <a>Let's Go</a>\n            </div>\n          </div> \n        )\n    }\n}\nexport default SearchBar;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList.js';\nimport SearchBar from '../SearchBar/SearchBar.js';\nimport ReactDOM from 'react-dom';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Voracious!</h1>\n        <SearchBar />\n        <BusinessList />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport './components/app/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}